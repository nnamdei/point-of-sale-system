<?php

namespace App\Http\Controllers;

use PDF;
use Cart;
use App\Product;
use App\Barcode;
use App\Traits\CartTrait;
use App\Traits\BarcodeTrait;
use Illuminate\Http\Request;

class BarcodeController extends Controller
{
    use CartTrait;
    use BarcodeTrait;

    public function __construct(){
        // $this->middleware('premium');
        // $this->middleware('manager')->except(['addToCartWithScanner']);
    }

    public function addToCartWithScanner(Request $request){
        $this->validate($request,[
            'content' => 'required'
        ],[
            'required' => 'Nothing was read from the barcode'
        ]);
        $cart = null;
        $product = null;
        $quantity = 1;

        $barcode = Barcode::where('barcode_content',$request->content)->first();
        if($barcode == null){

            return redirect()->back()->with('barcode_error', '<strong>FAILED!</strong> Could not verify barcode');
        }

        if($barcode->isGenerated()){ //if the barcode was generated by my BarcodeTrait, decrypt it!
            $content = explode('$',$request->content); //seperate the id and attribute
            $id = (int) $content[0];
            $product = Product::find($id);
            $option = array();
    
            if($product == null){
                return redirect()->back()->with('barcode_error', '<strong>FAILED!</strong> Product not found');
            }
    
            if($product->isVariable()){
                if($product->variants->count() > 0){
                    foreach($product->variants as $variant){
                        for($i=1; $i<= count($content); $i++){ //pick out the variant(s)
                            if(!isset($content[$i])){
                                return redirect()->route('desk.cart')->with('barcode_error','<strong>FAILED! </strong>'.$variant->variable.' of '.$product->name.' could be read'); 
                            }
                            $option[$variant->variable][$content[$i]] = $quantity;
                        }
                    }
                }
            }
            $cart = $this->arrangeCart($product,$quantity,$option);
        }
        elseif($barcode->isAttached()){
            $product = $barcode->product;
            $cart = $this->arrangeCart($product,$quantity);
        }

        if($product != null){
            $alreadyInCart = $product->inCart();
            if($alreadyInCart != null){ //if the product was found in the cart
                $totalNow = $alreadyInCart->qty + $quantity;
                if($product->saleFeasible($totalNow) !== true){ //check if more can still be added
                    return redirect()->back()->with('barcode_error','Limit of '.$product->name.' reached! All remaining '.$product->remaining().' already in cart');
                }
            }
        }

        if($product !== null && $cart !== null){
            if(!empty($cart['infeasibility'])){
                return redirect()->back()->with('barcode_error', '<strong>FAILED</strong>')->withErrors($cart['infeasibility']);
            }
            Cart::add($cart['id'],$cart['name'],$cart['qty'],$cart['price'],$cart['opts'])->associate('App\Product');
            return redirect()->route('desk.cart')->with('barcode_success',$product->name.' added to cart');    
        }
        return redirect()->back()->with('barcode_error', '<strong>FAILED! </strong>');    
    }

        // Attached a scanned barcode to a product
        public function attachBarcode(Request $request, $id){
            $this->validate($request,[
                'content' => 'required'
            ],
               [
                   'required' => 'Barcode scan failed!'
               ] 
            );
            $product = Product::findorfail($id);
            $barcode = Barcode::where('barcode_content', $request->content)->get();
            if($barcode->count() > 0){ //check if the barcode is not attached to another product already
                return redirect()->back()->with('barcode_error', 'Barcode already attached to '.$barcode->count().' product '.$barcode->first()->name.'<a href="'.route('products.show',$barcode->first()->product->id).'">'.$barcode->first()->product->name.'</a>');
            }
            if($this->attachBarcodeFromProduct($product, $request->content) != null){
                return redirect()->back()->with(['barcode_success' => 'Barcode attached to '.$product->name, 'scanner' => 'off']);
            }
    
        }
    
        public function generateBarcode($id){
            $product = Product::findorfail($id);
            $barcodes = $this->attachProductBarcode($product);
            if($barcodes->count() > 0){
                return redirect()->back()->with('success', 'Barcode generated for '.$product->name);
            }
            return redirect()->back()->with('error', 'Barcode generation for '.$product->name.' failed');
        }
    
        public function printBarcode($id){
           $barcode = Barcode::findorfail($id);
           $code = PDF::loadView('product.barcode', ['barcode' => $barcode]);
           return $code->stream($barcode->read().'.pdf');
        }
    
        public function removeBarcode($id){
            $product = Product::findorfail($id);
            if($product->barcodes->count() > 0){
                foreach($product->barcodes as $barcode){
                    $barcode->delete();
                }
                return redirect()->back()->with('success',$product->name.' barcodes removed');
            }
            return redirect()->back()->with('warning',$product->name.' does not have any barcode yet');
    
        }

}

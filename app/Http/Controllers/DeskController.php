<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use DB;
use Cart;
use Auth;
use Session;
use App\Sale;
use App\User;
use App\Barcode;
use App\Product;
use App\Category;
use App\Traits\CartTrait;
use App\Inventory\StockManager;
use App\Inventory\Transaction;

class DeskController extends Controller
{
    use CartTrait;

    public function __construct(){
        $this->middleware('attendant');
        $this->middleware('strictly-attendant')->except(['close','open']);
    }

    public function close($id){
        $user = User::findorfail($id);
        $user->desk_closed_at = now();
        $user->save();
    
        return redirect()->back()->with('success',$user->fullname().' desk closed!');
      }
    
      public function open($id){
        $user = User::findorfail($id);
        $user->desk_closed_at = null;
        $user->save();
    
        return redirect()->back()->with('success',$user->fullname().' desk opened!');
      }


    public function index(){
      
        $t = new Transaction();
        $transactions = $t->attendantTransactions(Auth::id());
       
        return view('desk.index')->with('period', $transactions['period'])
                        ->with('sales',$transactions['sales'])
                        ->with('activities', $transactions['activities'])
                        ->with('sales_chart',$transactions['sales_chart'])
                        ->with('service_records',$transactions['service_records'])
                        ->with('services_chart',$transactions['services_chart']);
    }
    
    public function products(){
        return view('desk.products')->with('products',Auth::user()->shop->products);
    }
    
    public function product($id){
        $product = Product::findorfail($id);
        return view('desk.product')->with('product',$product);
    }
    public function categories(){
        return view('desk.categories')->with('categories',Category::all());
    }

    public function category($id){
        return view('desk.category')->with('category',Category::find($id));
    }

    public function scanBarcode(Request $request){
        $this->validate($request,[
            'content' => 'required'
        ],[
            'required' => 'Nothing was read from the barcode'
        ]);
        $cart = null;
        $product = null;

        $barcode = Barcode::where('barcode_content',$request->content)->first();
        if($barcode == null){

            return redirect()->back()->with('barcode_error', '<strong>FAILED!</strong> Could not verify barcode');
        }

        if($barcode->isGenerated()){ //if the barcode was generated by my BarcodeTrait, decrypt it!
            $content = explode('$',$request->content); //seperate the id and attribute
            $id = (int) $content[0];
            $product = Product::find($id);
            $option = array();
            $quantity = 1;
    
            if($product == null){
                return redirect()->back()->with('barcode_error', '<strong>FAILED!</strong> Product not found');
            }
    
            if($product->isVariable()){
                if($product->variants->count() > 0){
                    foreach($product->variants as $variant){
                        for($i=1; $i<= count($content); $i++){ //pick out the variant(s)
                            if(!isset($content[$i])){
                                return redirect()->route('desk.cart')->with('barcode_error','<strong>FAILED! </strong>'.$variant->variable.' of '.$product->name.' could be read'); 
                            }
                            $option[$variant->variable][$content[$i]] = 1;
                        }
                    }
                }
            }
            $cart = $this->arrangeCart($product,$quantity,$option);
        }
        elseif($barcode->isAttached()){
            $product = $barcode->product;
            $cart = $this->arrangeCart($product,1);
        }

        if($product !== null && $cart !== null){
            if(!empty($cart['infeasibility'])){
                return redirect()->back()->with('barcode_error', '<strong>FAILED</strong>')->withErrors($cart['infeasibility']);
            }
            Cart::add($cart['id'],$cart['name'],$cart['qty'],$cart['price'],$cart['opts'])->associate('App\Product');
            return redirect()->route('desk.cart')->with('barcode_success',$product->name.' added to cart');    
        }
        return redirect()->back()->with('barcode_error', '<strong>FAILED! </strong>');    
    }

}
